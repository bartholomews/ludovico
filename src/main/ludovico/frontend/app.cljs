(ns ludovico.frontend.app
  (:require
    [cljsjs.moment]
    [ludovico.frontend.views :as views]
    [reagent.core :as r]
    [reagent.dom :as rd]
    [reitit.coercion.spec :as rss]
    [reitit.core :as reitit]
    [reitit.frontend :as rf]
    [reitit.frontend.easy :as rfe]
    [fipp.edn :as fedn]
    [goog.dom :as gdom]
    ;;[reagent.dom :as rdom]
    ;; [clerk.core :as clerk]
    )
  )

(.addEventListener
  js/window
  "DOMContentLoaded"
  (fn [] (js/console.log "Page loaded."))
  )

(defn init []
  (println "This is the frontend, it hot reloads when using 'watch'"))


;(ns ludovico.core
;  (:require
;    [moment]
;    [goog.dom :as gdom]
;    [reagent.dom :as rdom]
;    ;
;    [clerk.core :as clerk]
;    [accountant.core :as accountant]
;    [cljs.core.match :refer-macros [match]]
;    [dommy.core :refer-macros [sel sel1]]
;    [reagent.core :as reagent :refer [atom]]
;    ;[reagent.dom :as rdom]
;    [reagent.session :as session]
;    [reitit.frontend :as reitit]
;    ;[clerk.core :as clerk]
;    ;[accountant.core :as accountant]
;    ;[goog.dom :as gdom]
;    [ludovico.player :as player]
;    [ludovico.synth :as synth]
;    ;[reagent-material-ui.core.input-label :refer [input-label]]
;    ;[reagent-material-ui.core.menu-item :refer [menu-item]]
;    ;[reagent-material-ui.core.form-control :refer [form-control]]
;    ;[reagent-material-ui.core.select :refer [select]]
;    [applied-science.js-interop :as j]
;    )
;  )
;
(.addEventListener
  js/window
  "DOMContentLoaded"
  (fn [] (js/console.log "Page loaded."))
  )

(def routes
  [["/"
    {:name ::frontpage
     :view views/home-page}]

   ["/about"
    {:name ::about
     :view views/about-page}]

   ["/midi"
    {:name ::midi
     :view views/midi-page}]

   ;["/item/:id"
   ; {:name ::item
   ;  :view item-page
   ;  :parameters {:path {:id int?}
   ;               :query {(ds/opt :foo) keyword?}}}]
   ]
  )

(def router
  (reitit/router
    [["/" :index]
     ["/songs"
      ["" :songs]
      ["/:song-id" :song]]
     ["/about" :about]]))

(defn path-for [route & [params]]
  (if params
    (:path (reitit/match-by-name router route params))
    (:path (reitit/match-by-name router route))))
;
;
;(println "This text is printed from src/hello_world/core.cljs. Go ahead and edit it and see reloading in action.")
;
;(defn multiply [a b] (* a b))
;
;;;; define your app data so that it doesn't get over-written on reload
;;(defonce app-state (atom {:text "Hello world!"}))
;
;;(defn hello-world []
;;  [:div
;;   [:h1 (:text @app-state)]
;;   [:h3 "Edit this in src/hello_world/core.cljs and watch it change!"]])
;;
;
;;;; specify reload hook with ^;after-load metadata
;;(defn ^:after-load on-reload []
;;  (mount-app-element)
;;  ;; optionally touch your app-state to force rerendering depending on
;;  ;; your application
;;  ;; (swap! app-state update-in [:__figwheel_counter] inc)
;;  )
;
;
;
;;; -------------------------
;;; Translate routes -> page components
;
;; TODO: https://www.opensourcery.co.za/2016/05/27/smooth-client-side-routing-in-a-figwheel-only-project/
;(defn page-for [route]
;  (case route
;    :index #'home-page
;    :about #'about-page
;    :songs #'songs-page
;    :song #'song-page))
;
;(defn current-page []
;  (fn []
;    (let [page (:current-page (session/get :route))]
;      [:div
;       [:header
;        [:p [:a {:href (path-for :index)} "Home"] " | "
;         [:a {:href (path-for :about)} "About"]]]
;       [page]
;       [:footer
;        [:p "Ludovico was generated by the "
;         [:a {:href "https://github.com/reagent-project/reagent-template"} "Reagent Template"] "."]]])))
;
;
;;(defn get-app-element []
;;  (gdom/getElement "app"))
;
;;(defn mount [el]
;;  ;(rdom/render [hello-world] el))
;;  (rdom/render [home-page] el))
;
;;(defn mount-app-element []
;;  (when-let [el (get-app-element)]
;;    (mount el)))
;;
;;;; conditionally start your application based on the presence of an "app" element
;;;; this is particularly helpful for testing this ns without launching the app
;;(mount-app-element)
;
;(defn mount-root []
;  (rdom/render [current-page] (gdom/getElement "app")))
;
(defn init2! []
  (js/console.log "INIT")
  ;; (clerk/initialize!)
  ;(accountant/configure-navigation!
  ;  {:nav-handler
  ;   (fn [path]
  ;     (let [match (reitit/match-by-path router path)
  ;           current-page (:name (:data match))
  ;           route-params (:path-params match)]
  ;       (reagent/after-render clerk/after-render!)
  ;       (session/put! :route {:current-page (page-for current-page)
  ;                             :route-params route-params})
  ;       (clerk/navigate-page! path)
  ;       ))
  ;   :path-exists?
  ;   (fn [path]
  ;     (boolean (reitit/match-by-path router path)))})
  ;(accountant/dispatch-current!)
  ;(mount-root)
  )


(defonce match (r/atom nil))

(defn current-page []
  [:div
   [:ul
    [:li [:a {:href (rfe/href ::frontpage)} "Frontpage"]]
    [:li [:a {:href (rfe/href ::about)} "About"]]
    [:li [:a {:href (rfe/href ::midi)} "Songs"]]
    ;;[:li [:a {:href (rfe/href ::item {:id 1})} "Item 1"]]
    ;;[:li [:a {:href (rfe/href ::item {:id 2} {:foo "bar"})} "Item 2"]]
    ]
   (if @match
     (let [view (:view (:data @match))]
       [view @match]))
   ;; TODO[FB] what is this a debug string ?
   ;;[:pre (with-out-str (fedn/pprint @match))]
   ])

;; https://github.com/metosin/reitit/blob/master/examples/frontend/src/frontend/core.cljs
(defn init! []
  (let [current-time (.format (js/moment) "dddd")]
    (js/console.log (str "Today is " current-time))
    (rfe/start!
      (rf/router routes {:data {:coercion rss/coercion}})
      (fn [m] (reset! match m))
      ;; set to false to enable HistoryAPI
      {:use-fragment true})
    (rd/render [current-page] (gdom/getElement "app"))
    )
  )

(init!)
