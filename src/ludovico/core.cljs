(ns ludovico.core
  (:require
    [moment]
    [goog.dom :as gdom]
    [reagent.dom :as rdom]
    ;
    [clerk.core :as clerk]
    [accountant.core :as accountant]
    [cljs.core.match :refer-macros [match]]
    [dommy.core :refer-macros [sel sel1]]
    [reagent.core :as reagent :refer [atom]]
    ;[reagent.dom :as rdom]
    [reagent.session :as session]
    [reitit.frontend :as reitit]
    ;[clerk.core :as clerk]
    ;[accountant.core :as accountant]
    ;[goog.dom :as gdom]
    [ludovico.player :as player]
    [ludovico.synth :as synth]
    ;[reagent-material-ui.core.input-label :refer [input-label]]
    ;[reagent-material-ui.core.menu-item :refer [menu-item]]
    ;[reagent-material-ui.core.form-control :refer [form-control]]
    ;[reagent-material-ui.core.select :refer [select]]
    [applied-science.js-interop :as j]
    )
  )

(.addEventListener
  js/window
  "DOMContentLoaded"
  (fn [] (js/console.log "Page loaded."))
  )

(def router
  (reitit/router
    [["/" :index]
     ["/songs"
      ["" :songs]
      ["/:song-id" :song]]
     ["/about" :about]]))

(defn path-for [route & [params]]
  (if params
    (:path (reitit/match-by-name router route params))
    (:path (reitit/match-by-name router route))))

(defn on-midi-file-selected [input]
  (let
    [fr (js/FileReader.)
     files (j/get-in input [:target :files])
     file (first files)
     ]
    (j/assoc! fr :onload (fn [e] (player/on-midi-loaded (j/get-in e [:target :result]))))
    (j/call fr :readAsDataURL file)
    )
  )

(defn home-page []
  [:span.main
   [:h1 "Ludovico"]
   ; https://material-ui.com/components/selects/
   [:div
    [:h5 {:class "section-label"} "Load Midi"]
    ; https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Using_Web_Audio_API
    [:audio#midi-track {:src (get @player/midi-player-atom :midi-src) :status "stopped"}]
    [:input {:type "file" :on-change on-midi-file-selected}]
    [:div
     [:button {:on-click #(player/on-play-btn-click)} [:span (get @player/midi-player-atom :next)]]
     [:button {:on-click #(player/on-stop-btn-click)} [:span "Stop"]]
     ]
    ]
   [:div [:button {:aria-checked "false" :on-click (synth/test-bach! 74 0.1)} [:span "Test Bach"]]]
   [:div [:button {:aria-checked "false" :on-click (synth/test-soundfont!)} [:span "Test Soundfont"]]]
   ; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   [:div#sketch]
   ;[:ul [:li [:a {:href (path-for :songs)} "Songs list"]]]
   ]
  )

(println "This text is printed from src/hello_world/core.cljs. Go ahead and edit it and see reloading in action.")

(defn multiply [a b] (* a b))

;;; define your app data so that it doesn't get over-written on reload
;(defonce app-state (atom {:text "Hello world!"}))

;(defn hello-world []
;  [:div
;   [:h1 (:text @app-state)]
;   [:h3 "Edit this in src/hello_world/core.cljs and watch it change!"]])
;

;;; specify reload hook with ^;after-load metadata
;(defn ^:after-load on-reload []
;  (mount-app-element)
;  ;; optionally touch your app-state to force rerendering depending on
;  ;; your application
;  ;; (swap! app-state update-in [:__figwheel_counter] inc)
;  )

(defn songs-page []
  (fn []
    [:span.main
     [:h1 "Songs"]
     [:ul (map (fn [song-id]
                 [:li {:name (str "song-" song-id) :key (str "song-" song-id)}
                  [:a {:href (path-for :song {:song-id song-id})} "Song: " song-id]])
               (range 1 60))]]))


(defn song-page []
  (fn []
    (let [routing-data (session/get :route)
          song (get-in routing-data [:route-params :song-id])]
      [:span.main
       [:h1 (str "Song " song "")]
       [:p [:a {:href (path-for :songs)} "Back to songs list"]]])))


(defn about-page []
  (fn [] [:span.main
          [:h1 "About"]]))


;; -------------------------
;; Translate routes -> page components

; TODO: https://www.opensourcery.co.za/2016/05/27/smooth-client-side-routing-in-a-figwheel-only-project/
(defn page-for [route]
  (case route
    :index #'home-page
    :about #'about-page
    :songs #'songs-page
    :song #'song-page))

(defn current-page []
  (fn []
    (let [page (:current-page (session/get :route))]
      [:div
       [:header
        [:p [:a {:href (path-for :index)} "Home"] " | "
         [:a {:href (path-for :about)} "About"]]]
       [page]
       [:footer
        [:p "Ludovico was generated by the "
         [:a {:href "https://github.com/reagent-project/reagent-template"} "Reagent Template"] "."]]])))


;(defn get-app-element []
;  (gdom/getElement "app"))

;(defn mount [el]
;  ;(rdom/render [hello-world] el))
;  (rdom/render [home-page] el))

;(defn mount-app-element []
;  (when-let [el (get-app-element)]
;    (mount el)))
;
;;; conditionally start your application based on the presence of an "app" element
;;; this is particularly helpful for testing this ns without launching the app
;(mount-app-element)

(defn mount-root []
  (rdom/render [current-page] (gdom/getElement "app")))

(defn init! []
  (clerk/initialize!)
  (accountant/configure-navigation!
    {:nav-handler
     (fn [path]
       (let [match (reitit/match-by-path router path)
             current-page (:name (:data match))
             route-params (:path-params match)]
         (reagent/after-render clerk/after-render!)
         (session/put! :route {:current-page (page-for current-page)
                               :route-params route-params})
         (clerk/navigate-page! path)
         ))
     :path-exists?
     (fn [path]
       (boolean (reitit/match-by-path router path)))})
  (accountant/dispatch-current!)
  (mount-root))

(init!)