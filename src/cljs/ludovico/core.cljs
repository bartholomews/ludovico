(ns ludovico.core
  (:require
    [cljs.core.match :refer-macros [match]]
    [dommy.core :as dommy :refer-macros [sel sel1]]
    [reagent.core :as reagent :refer [atom]]
    [reagent.dom :as rdom]
    [reagent.session :as session]
    [reitit.frontend :as reitit]
    [clerk.core :as clerk]
    [accountant.core :as accountant]
    [goog.dom :as gdom]
    [ludovico.player :as player]
    [reagent.core :as r]))

;; -------------------------
;; Routes

(def router
  (reitit/router
    [["/" :index]
     ["/songs"
      ["" :songs]
      ["/:song-id" :song]]
     ["/about" :about]]))

(defn path-for [route & [params]]
  (if params
    (:path (reitit/match-by-name router route params))
    (:path (reitit/match-by-name router route))))

;; -------------------------
;; Page components

(.addEventListener
  js/window
  "DOMContentLoaded"
  (fn [] (player/on-midi-loaded))
  )

(defn create-sketch-canvas [counter] [:div {:id (str "sketch-" counter) :class "sketch" :data-counter counter}])

(defn home-page []
  (fn []
    [:span.main
     [:h1 "Ludovico"]
     [:button {:aria-checked "false" :on-click #(player/play-midi-note)}
      [:span "Bach"]]
     ; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     ;[:audio {:src "midi/0004135.mp3"}]
     [:audio {:id "audio-track" :src "midi/fur_elise.mid" :status "stopped"}]
     [:div
      ; https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Using_Web_Audio_API
      [:button#play-toggle-btn {:role "switch" :aria-checked "false" :on-click #(player/on-player-btn-click)}
       [:span @player/play-toggle-btn-label]
       ]

      [:button {:id       "play-stop-btn" :role "switch" :aria-checked "false"
                :on-click #(player/stop (player/getAudioElement))
                }
       [:span "Stop"]]
      ]
     ; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     (create-sketch-canvas 1)
     [:ul
      [:li [:a {:href (path-for :songs)} "Songs list"]]
      ]]
    )
  )

(defn songs-page []
  (fn []
    [:span.main
     [:h1 "Songs"]
     [:ul (map (fn [song-id]
                 [:li {:name (str "song-" song-id) :key (str "song-" song-id)}
                  [:a {:href (path-for :song {:song-id song-id})} "Song: " song-id]])
               (range 1 60))]]))


(defn song-page []
  (fn []
    (let [routing-data (session/get :route)
          song (get-in routing-data [:route-params :song-id])]
      [:span.main
       [:h1 (str "Song " song "")]
       [:p [:a {:href (path-for :songs)} "Back to songs list"]]])))


(defn about-page []
  (fn [] [:span.main
          [:h1 "About"]]))


;; -------------------------
;; Translate routes -> page components

(defn page-for [route]
  (case route
    :index #'home-page
    :about #'about-page
    :songs #'songs-page
    :song #'song-page))


;; -------------------------
;; Page mounting component

(defn current-page []
  (fn []
    (let [page (:current-page (session/get :route))]
      [:div
       [:header
        [:p [:a {:href (path-for :index)} "Home"] " | "
         [:a {:href (path-for :about)} "About"]]]
       [page]
       [:footer
        [:p "Ludovico was generated by the "
         [:a {:href "https://github.com/reagent-project/reagent-template"} "Reagent Template"] "."]]])))

;; -------------------------
;; Initialize app

(defn mount-root []
  (rdom/render [current-page] (gdom/getElement "app")))

(defn init! []
  (clerk/initialize!)
  (accountant/configure-navigation!
    {:nav-handler
     (fn [path]
       (let [match (reitit/match-by-path router path)
             current-page (:name (:data match))
             route-params (:path-params match)]
         (reagent/after-render clerk/after-render!)
         (session/put! :route {:current-page (page-for current-page)
                               :route-params route-params})
         (clerk/navigate-page! path)
         ))
     :path-exists?
     (fn [path]
       (boolean (reitit/match-by-path router path)))})
  (accountant/dispatch-current!)
  (mount-root))
