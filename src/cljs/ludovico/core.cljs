(ns ludovico.core
  (:require
    [cljs.core.match :refer-macros [match]]
    [dommy.core :refer-macros [sel sel1]]
    [reagent.core :as reagent :refer [atom]]
    [reagent.dom :as rdom]
    [reagent.session :as session]
    [reitit.frontend :as reitit]
    [clerk.core :as clerk]
    [accountant.core :as accountant]
    [goog.dom :as gdom]
    [ludovico.player :as player]
    [reagent.core :as r]
    [reagent-material-ui.core.input-label :refer [input-label]]
    [reagent-material-ui.core.menu-item :refer [menu-item]]
    [reagent-material-ui.core.form-control :refer [form-control]]
    [reagent-material-ui.core.select :refer [select]]
    [applied-science.js-interop :as j]
    )
  )

;(def midi-src "midi/fur_elise.mid")
(def midi-src "midi/toccata_and_fugue_in_d_minor.mid")
;(def midi-src "midi/song_for_my_father.mid")
;(def midi-src "midi/tetris.mid")
;(def midi-src "midi/nocturne_1.mid")

;; -------------------------
;; Routes

(def router
  (reitit/router
    [["/" :index]
     ["/songs"
      ["" :songs]
      ["/:song-id" :song]]
     ["/about" :about]]))

(defn path-for [route & [params]]
  (if params
    (:path (reitit/match-by-name router route params))
    (:path (reitit/match-by-name router route))))

;; -------------------------
;; Page components

(.addEventListener
  js/window
  "DOMContentLoaded"
  (fn [] (player/on-midi-loaded))
  )

(def player-atom (r/atom {:midi-src ""}))

(defn on-midi-change [e]
  (let
    [new-midi-src (j/get-in e [:target :value])]
    (js/console.log (j/get-in e [:target :value]))
    (swap-vals! player-atom assoc :midi-src new-midi-src)
    )
  )

(defn load-midi-menu-items []
  (let
    [load "TODO: load"]
    (
     [menu-item {:value "10"} "Ten"]
     [menu-item {:value "20"} "Twenty"]
     [menu-item {:value "30"} "Thirty"])
    )
  )

(defn on-midi-file-selected [file]
  (js/console.log file)
  (js/console.log (j/get file :files))
  )

(defn home-page []
  (fn []
    [:span.main
     [:h1 "Ludovico"]
     ; https://material-ui.com/components/selects/
     [:div
      [:h5 {:class "section-label"} "Load Midi"]
      [:input {:type "file" :on-change on-midi-file-selected}]

      [form-control {:class "midi-select-form"}
       [select {:value (get @player-atom :midi-src) :display-empty true :class "select-empty" :on-change on-midi-change}
        [menu-item {:value "" :disabled true} "Select MIDI"]
        (load-midi-menu-items)
        ;[form-helper-text "Placeholder"]
        ]
       ]
      ]
     [:div
      [:h5 {:class "section-label"} "Midijs"]
      [:audio {:id "midijs-audio-track" :src midi-src :status "stopped"}]
      [:button {:on-click #(player/on-midijs-play-btn-click)} [:span @player/midijs-play-toggle-btn-label]]
      [:button {:on-click #(player/on-midijs-stop-btn-click)} [:span "Stop"]]
      ]
     [:div [:button {:aria-checked "false" :on-click #((player/play-midi-note-f 74 0.1))} [:span "Bach"]]]
     ; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     [:div
      [:h5 {:class "section-label"} "Quil sketch"]
      ; https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Using_Web_Audio_API
      [:audio {:id "sketch-audio-track" :src midi-src :status "stopped"}]
      [:button {:on-click #(player/on-sketch-play-btn-click)} [:span @player/sketch-play-toggle-btn-label]]
      [:button {:on-click #(player/on-sketch-stop-btn-click)} [:span "Stop"]]
      ]
     [:div#sketch]
     [:ul
      ;[:li [:a {:href (path-for :songs)} "Songs list"]]
      ]]
    )
  )

(defn songs-page []
  (fn []
    [:span.main
     [:h1 "Songs"]
     [:ul (map (fn [song-id]
                 [:li {:name (str "song-" song-id) :key (str "song-" song-id)}
                  [:a {:href (path-for :song {:song-id song-id})} "Song: " song-id]])
               (range 1 60))]]))


(defn song-page []
  (fn []
    (let [routing-data (session/get :route)
          song (get-in routing-data [:route-params :song-id])]
      [:span.main
       [:h1 (str "Song " song "")]
       [:p [:a {:href (path-for :songs)} "Back to songs list"]]])))


(defn about-page []
  (fn [] [:span.main
          [:h1 "About"]]))


;; -------------------------
;; Translate routes -> page components

(defn page-for [route]
  (case route
    :index #'home-page
    :about #'about-page
    :songs #'songs-page
    :song #'song-page))


;; -------------------------
;; Page mounting component

(defn current-page []
  (fn []
    (let [page (:current-page (session/get :route))]
      [:div
       [:header
        [:p [:a {:href (path-for :index)} "Home"] " | "
         [:a {:href (path-for :about)} "About"]]]
       [page]
       [:footer
        [:p "Ludovico was generated by the "
         [:a {:href "https://github.com/reagent-project/reagent-template"} "Reagent Template"] "."]]])))

;; -------------------------
;; Initialize app

(defn mount-root []
  (rdom/render [current-page] (gdom/getElement "app")))

(defn init! []
  (clerk/initialize!)
  (accountant/configure-navigation!
    {:nav-handler
     (fn [path]
       (let [match (reitit/match-by-path router path)
             current-page (:name (:data match))
             route-params (:path-params match)]
         (reagent/after-render clerk/after-render!)
         (session/put! :route {:current-page (page-for current-page)
                               :route-params route-params})
         (clerk/navigate-page! path)
         ))
     :path-exists?
     (fn [path]
       (boolean (reitit/match-by-path router path)))})
  (accountant/dispatch-current!)
  (mount-root))
